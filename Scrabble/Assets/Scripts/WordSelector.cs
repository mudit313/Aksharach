//C# Script that takes the list of words generated by the AI, level of
//hardness and decides the one to play in the computer controlled turn. The code
//ensures that there is a possibility of a relatively easy word in hard mode
//and a comparitively high scoring word in easy mode too. This is done 
//by not making the word selection absolute and instead using probabilistic
//selection of word from the AI list

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class WordSelector : MonoBehaviour {

	//public void Wselect ()
	public static List<int> choose (List<List<int>> Wordlist)
	{
		int level;
		int size;
		List<int> ChosenWord = new List<int>();
		List<int> temp = new List<int>();
		//GameObject a;
		int selector;
		int chooser = 0;
		//a.GetComponent<AI>().listlist
		//Wordlist = new List<List<int>> ();
		//Wordlist = a.GetComponent<AI> ().listlist;
		/*
		List<int> list1 = new List<int> ();
		List<int> list2 = new List<int> ();
		List<int> list3 = new List<int> ();
		Wordlist = new List<List<int>> ();

		list1.Add (11);
		list1.Add (12);
		list1.Add (13);
		list1.Add (14);
		list1.Add (15);

		list2.Add (6);
		list2.Add (7);
		list2.Add (8);
		list2.Add (9);
		list2.Add (10);

		list3.Add (1);
		list3.Add (2);
		list3.Add (3);
		list3.Add (4);
		list3.Add (5);

		Wordlist.Add (list1);
		Wordlist.Add (list2);
		Wordlist.Add (list3);
		*/
		/*
		foreach (var sublist in Wordlist)
		{
			foreach (var int in sublist)
			{
				Debug.Log(int);
			}
		}
		*/

		//================>>>>>>>>>>>>>SORT ACC TO THE SCORE !!!!!!!!


		//Wordlist.Sort ();
		level = 2;
		size = Wordlist.Count;

//The list of words is sorted with respect to the PROFIT VALUE which is
//the score - penalty for each possible word. The unprofitable words are
//at the lower indices and highly profitable ones at higher indices.

		for (int i=0; i<size-1; i++)
		{
			for (int j=0;j<size-i-1;j++)
			{
				int sublistsize1=Wordlist[j].Count;
				int sublistsize2=Wordlist[j+1].Count;
				if(Wordlist[j][sublistsize1-4]>Wordlist[j+1][sublistsize2-4])
				{
					temp=Wordlist[j];
					Wordlist[j]=Wordlist[j+1];
					Wordlist[j+1]=temp;
				}
			}
		}
		/*
		for (int i=0; i<size; i++)
		{
			int sublistsize1=Wordlist[i].Count;
			//for (int j=0;j<sublistsize1;j++)

				Debug.Log(Wordlist[i][sublistsize1-4]);

		}
		*/

//for a small list the end words are directly
//picked for easy and hard levels and 
//the mid word is chosen for intermediate mode
		if ((size >= 1) && (size <= 9)) 
		{
			if(level==0)
			{
				ChosenWord=Wordlist[0];
			}
			else if(level==1)
			{
				ChosenWord=Wordlist[size/2];
			}
			else if(level==2)
			{
				ChosenWord=Wordlist[size];
			}
		}

//for an intermediate list lenght a 5 length selector
//is made that pickes the start of the list for easy and 
//end of list for hard levels. The final word to be played 
//is played by a following a NORMAL distribution probability.

		if ((size >= 10) && (size <= 29)) 
		{

			selector=Random.Range(1,9875);
//Deciding which word to output using NORMAL PROBABILITY DISTRIBUTION
			if((selector>=1)&&(selector<=606))
			{
				chooser=0;
			}
			else if((selector>606)&&(selector<=3023))
			{
				chooser=1;
			}
			else if((selector>3023)&&(selector<=6852))
			{
				chooser=2;
			}
			else if((selector>6852)&&(selector<=9269))
			{
				chooser=3;
			}
			else if((selector>9269)&&(selector<=9875))
			{
				chooser=4;
			}
//Deciding the word to return based on DIFFICULTY LEVEL of AI
			if(level==0)
			{
				ChosenWord=Wordlist[chooser];
			}
			else if(level==1)
			{
				ChosenWord=Wordlist[((size/2)-2)+chooser];
			}
			else if(level==2)
			{
				ChosenWord=Wordlist[size-5+chooser];
			}
		}

//for a big list lenght a 10 length selector
//is made that pickes the start of the list for easy and 
//end of list for hard levels. The final word to be played 
//is played by a following a NORMAL distribution probability.

		if (size >= 30) 
		{
			selector=Random.Range(1,9876);
//Deciding which word to output using NORMAL PROBABILITY DISTRIBUTION

			if((selector>=1)&&(selector<=165))
			{
				chooser=0;
			}
			else if((selector>165)&&(selector<=606))
			{
				chooser=1;
			}
			else if((selector>606)&&(selector<=1524))
			{
				chooser=2;
			}
			else if((selector>1524)&&(selector<=3023))
			{
				chooser=3;
			}
			else if((selector>3023)&&(selector<=4938))
			{
				chooser=4;
			}
			else if((selector>4938)&&(selector<=6853))
			{
				chooser=5;
			}
			else if((selector>6853)&&(selector<=8352))
			{
				chooser=6;
			}
			else if((selector>8352)&&(selector<=9270))
			{
				chooser=7;
			}
			else if((selector>9270)&&(selector<=9711))
			{
				chooser=8;
			}
			else if((selector>9711)&&(selector<=9876))
			{
				chooser=9;
			}
//Deciding the word to return based on DIFFICULTY LEVEL of AI


			if(level==0)
			{
				ChosenWord=Wordlist[chooser];
			}
			else if(level==1)
			{
				ChosenWord=Wordlist[((size/2)-5)+chooser];
			}
			else if(level==2)
			{
				ChosenWord=Wordlist[size-10+chooser];
			}
		}

		return ChosenWord;

	}
	

}
